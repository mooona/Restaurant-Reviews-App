{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/restaurant_info.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","callback","this","getCachedMessages","then","data","fetch","response","json","restaurants","Promise","all","map","restaurant","id","reviews","db","store","openObjectStore","forEach","put","openCursor","cursor","advance","deleteRest","res","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","v","indexOf","cuisines","uniqueCuisines","photograph","storeName","transactionMode","arguments","undefined","transaction","objectStore","_idb2","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","openDatabase","getAll","submitReview","body","_dbhelper2","get","parseInt","restaurant_id","restaurantStore","reviewQueue","push","createdAt","complete","navigator","serviceWorker","ready","swRegistration","sync","register","document","getElementById","addEventListener","form","reviewerName","value","comment","textarea","ratings","querySelectorAll","restaurantId","window","location","href","split","rating","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","item","checked","name","comments","Date","now","updatedAt","review","createReviewHTML","appendChild","event","initMap","fetchRestaurantFromURL","console","mapboxgl","accessToken","locsMap","Map","container","style","center","latlng","zoom","el","createElement","className","Marker","offset","setLngLat","addTo","fillBreadcrumb","fillReviewsForm","self","log","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","address","image","alt","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","time","title","noReviews","ul","li","reviewer","randomColor","Math","floor","random","toString","profile","setAttribute","charAt","reviewdata","nameRate","ratingContainer","yellow","white","breakBorder","breadcrumb","url","replace","RegExp","exec","decodeURIComponent","onscroll","nav","scrollY","promisifyRequest","request","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","Array","slice","nativeObject","query","count","instance","items","iterateCursor","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","idb"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n'use strict';\r\n/**\r\n * Common database helper functions.\r\n */\r\n\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openObjectStore = (db, storeName, transactionMode = 'readonly') => {\r\n    return db.transaction(storeName, transactionMode).objectStore(storeName);\r\n  }\r\n\r\n  static openDatabase = function () {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('favqueue')) {\r\n        upgradeDb.createObjectStore('favqueue');\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('reviewqueue')) {\r\n        upgradeDb.createObjectStore('reviewqueue');\r\n      }\r\n    })\r\n  }();\r\n\r\n  static getCachedMessages = function () {\r\n    dbPromise = this.openDatabase;\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      return DBHelper.openObjectStore(db, 'restaurants').getAll();\r\n\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then((data) => {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants').then((response) => {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        return Promise.all(\r\n          restaurants.map((restaurant) => {\r\n            return fetch(`http://localhost:1337/reviews/?restaurant_id=${restaurant.id}`)\r\n              .then((response) => {\r\n                return response.json()\r\n              }).then((reviews) => {\r\n                restaurant.reviews = reviews;\r\n                return dbPromise.then((db) => {\r\n                  if (!db) return;\r\n                  var store = DBHelper.openObjectStore(db, 'restaurants', 'readwrite')\r\n                  restaurants.forEach(restaurant => store.put(restaurant));\r\n                  return store.openCursor(null, 'prev').then((cursor) => {\r\n                    return cursor.advance(30);\r\n                  }).then(function deleteRest(cursor) {\r\n                    if (!cursor) return;\r\n                    cursor.delete();\r\n                    return cursor.continue()\r\n                      .then(deleteRest);\r\n                  })\r\n                })\r\n              })\r\n          })\r\n        ).then((res) => {\r\n          return callback(null, restaurants);\r\n        });\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`img/10.webp`);\r\n    return (`img/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;","'use strict';\n\nimport DBHelper from './dbhelper';\nlet restaurant;\nvar map;\n\nconst triggerReviewRequestQueueSync = function () {\n  navigator.serviceWorker.ready.then(function (swRegistration) {\n    swRegistration.sync.register('reviewqueue');\n  });\n}\n\nfunction submitReview(body) {\n  return DBHelper.openDatabase\n    .then(db => {\n      let restaurantStore = DBHelper.openObjectStore(db, 'restaurants', 'readonly');\n      return restaurantStore.get(parseInt(body.restaurant_id)).then((restaurant) => {\n\n        const updateRestaurants = function (restaurant) {\n          let restaurantStore = DBHelper.openObjectStore(db, 'restaurants', 'readwrite');\n          restaurantStore.put(restaurant);\n          return restaurantStore.complete;\n        }\n\n        const updateReviewQueue = function (restaurant) {\n          let reviewQueue = DBHelper.openObjectStore(db, 'reviewqueue', 'readwrite');\n          reviewQueue.put(body, body.createdAt);\n          return reviewQueue.complete;\n        }\n\n        restaurant.reviews.push(body)\n\n        return Promise.all([updateReviewQueue(restaurant), updateRestaurants(restaurant)])\n          .then(() => {\n            return triggerReviewRequestQueueSync();\n          })\n      });\n    })\n}\n\nconst submitButton = document.getElementById('submit-button');\nsubmitButton.addEventListener('click', function () {\n  const form = document.getElementById(\"add_review-form\");\n  let reviewerName = document.getElementById('your-name').value;\n  const comment = form.textarea.value;\n  const ratings = document.querySelectorAll('input[type=\"radio\"]');\n  const restaurantId = window.location.href.split('=')[1];\n  let rating = 0;\n  let ratingId;\n  for (var item of ratings) {\n    if (item.checked == true) {\n      ratingId = item.id;\n      rating = item.value;\n      item.checked = false;\n      break;\n    }\n  }\n\n  const body = {\n    'restaurant_id': restaurantId,\n    'name': reviewerName,\n    'rating': rating,\n    'comments': comment,\n    'createdAt': Date.now(),\n    'updatedAt': Date.now()\n  }\n\n  form.textarea.value = '';\n  document.getElementById('reviewer-name').value = '';\n\n  const review = createReviewHTML(body);\n  const ul = document.getElementById('reviews-list');\n  ul.appendChild(review);\n  return submitReview(body);\n});\n\n/**\n * Initialize map box map, called from HTML.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    initMap();\n});\nwindow.initMap = () => {\n    fetchRestaurantFromURL((error, restaurant) => {\n\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n        mapboxgl.accessToken = 'pk.eyJ1IjoibWZhcmciLCJhIjoiY2p1ZDloNmRiMDR3MDN5bXk5ZmUzdTRodiJ9.7Tp8zK2yRKBICT5Ry9q64Q';\n        var locsMap = new mapboxgl.Map({\n            container: 'locsMap',\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: restaurant.latlng, // starting position\n            zoom: 12// starting zoom\n        });\n        var el = document.createElement('div');\n        el.className = 'marker';\n        let mymarker =new mapboxgl.Marker(el, { offset: [0, -23] }).setLngLat(restaurant.latlng).addTo(locsMap);\n      fillBreadcrumb();\n        fillReviewsForm();\n    //  DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nvar fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    console.log('already fetched');\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nvar fillRestaurantHTML = (restaurant = self.restaurant) => {\n\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n    image.alt=restaurant.name + \" restaurant image\"\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nvar fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nvar fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.className = 'reviews-label';\n  title.innerHTML = reviews.length + ' Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nvar createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.className = 'reviewContainer';\n  /*reviewer details*/\n    const reviewer= document.createElement('div');\n    reviewer.className = 'reviewer-details-container';\n    li.appendChild(reviewer);\n\n    /*profile picture*/\n    let randomColor = Math.floor(Math.random()*16777215).toString(16);\n    const profile= document.createElement('div');\n    profile.className=\"user-profile-pic\";\n    profile.setAttribute('style', 'background-color:#'+randomColor+';');\n    profile.innerHTML= review.name.charAt(0);\n    reviewer.appendChild(profile);\n\n    const reviewdata= document.createElement('div');\n    reviewdata.className = 'review-details-container';\n    reviewer.appendChild(reviewdata);\n\n    const nameRate =document.createElement('div');\n    nameRate.className = 'name-rate-container';\n    reviewdata.appendChild(nameRate);\n\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n    nameRate.appendChild(name);\n\n    /*draw rating in stars instead of numbers function*/\n  const rating = document.createElement('div');\n  rating.setAttribute('aria-label', `Rating ${review.rating}`);\n  rating.className =\"rating-container\";\n    let ratingContainer= \"\";\n    let yellow= review.rating;\n    let white = 5 - yellow;\n    while (yellow >= 1) {\n        ratingContainer += '<i class=\"star-yellow\" aria-hidden=\"true\">&starf;</i>';\n        yellow--;\n    }\n    while (white >= 1) {\n        ratingContainer += '<i class=\"star-white\" aria-hidden=\"true\">&starf;</i>';\n        white--;\n    }\n    rating.innerHTML = ratingContainer;\n    nameRate.appendChild(rating);\n    /*date\n    const date = document.createElement('p');\n    date.innerHTML = review.date;\n    date.setAttribute('aria-label', `Review date`);\n    date.className =\"review-date\";\n    reviewdata.appendChild(date);*/\n\n/*comments*/\n  const comments = document.createElement('p');\n  comments.innerHTML = '<span class=\"review-date\" aria-label=\"Review date\">'+review+'</span>' + review.comments;\n    comments.className =\"comment\";\n  li.appendChild(comments);\n\n\n/*break line*/\n    const breakBorder = document.createElement('div');\n    breakBorder.className =\"break\";\n    breakBorder.setAttribute('aria-hidden', true);\n    li.appendChild(breakBorder);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nvar fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  li.setAttribute('aria-current', 'page')\n  breadcrumb.appendChild(li);\n  return breadcrumb;\n}\n\nvar fillReviewsForm = (restaurant = self.restaurant) =>{\n    /*form review title*/\n    const restaurantTitle= document.getElementById('reviewFormTitle');\n    restaurantTitle.innerHTML= \"Please Review \" + restaurant.name + \" Restaurant\";\n    console.log('reviews form filled');\n}\n/**\n * Get a parameter by name from page URL.\n */\nvar getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n/*on scroll change the breadcrumb nav color*/\nwindow.onscroll = () => {\n    const nav = document.getElementById('breadcrumb');\n    //const navpos= nav.offset().top;\n    if( window.scrollY <= 12) nav.className = '';\n    else nav.className = 'scroll';\n};\n\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}