{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/main.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","callback","this","getCachedMessages","then","data","fetch","response","json","restaurants","Promise","all","map","restaurant","id","reviews","db","store","openObjectStore","forEach","put","openCursor","cursor","advance","deleteRest","res","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","v","indexOf","cuisines","uniqueCuisines","photograph","storeName","transactionMode","arguments","undefined","transaction","objectStore","_idb2","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","openDatabase","getAll","locsMap","loc","markers","_dbhelperJs2","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","setEventListeners","initMap","updateRestaurants","cSelect","getElementById","nSelect","cIndex","selectedIndex","nIndex","value","fetchRestaurantByCuisineAndNeighborhood","console","resetRestaurants","fillRestaurantsHTML","latlng","flyTo","center","addMarkersToMap","self","fillNeighborhoodsHTML","select","option","createElement","innerHTML","append","fillCuisinesHTML","window","lat","lng","mapboxgl","accessToken","mymap","Map","container","style","zoom","m","setMap","tabIndex","ul","createRestaurantHTML","lazyImageObserver","lazyImages","slice","querySelectorAll","IntersectionObserver","entries","observer","entry","isIntersecting","lazyImage","target","src","dataset","srcset","classList","remove","unobserve","observe","restaurantId","isRestaurantFavorite","is_favorite","li","className","imgFavContainer","favoriteButton","imgContainer","image","imageUrlForRestaurant","alt","name","setAttribute","toggleFavorite","address","more","href","urlForRestaurant","parseInt","getAttribute","isFavorised","hasAttribute","restaurantName","removeAttribute","get","isFavorite","toString","restaurantStore","favStore","url","method","complete","navigator","serviceWorker","ready","swRegistration","sync","register","err","log","el","Marker","offset","setLngLat","addTo","getElementsByClassName","stopPropagation","location","promisifyRequest","request","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","nativeObject","query","count","instance","items","iterateCursor","push","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","idb"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n'use strict';\r\n/**\r\n * Common database helper functions.\r\n */\r\n\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openObjectStore = (db, storeName, transactionMode = 'readonly') => {\r\n    return db.transaction(storeName, transactionMode).objectStore(storeName);\r\n  }\r\n\r\n  static openDatabase = function () {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('favqueue')) {\r\n        upgradeDb.createObjectStore('favqueue');\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('reviewqueue')) {\r\n        upgradeDb.createObjectStore('reviewqueue');\r\n      }\r\n    })\r\n  }();\r\n\r\n  static getCachedMessages = function () {\r\n    dbPromise = this.openDatabase;\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      return DBHelper.openObjectStore(db, 'restaurants').getAll();\r\n\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then((data) => {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants').then((response) => {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        return Promise.all(\r\n          restaurants.map((restaurant) => {\r\n            return fetch(`http://localhost:1337/reviews/?restaurant_id=${restaurant.id}`)\r\n              .then((response) => {\r\n                return response.json()\r\n              }).then((reviews) => {\r\n                restaurant.reviews = reviews;\r\n                return dbPromise.then((db) => {\r\n                  if (!db) return;\r\n                  var store = DBHelper.openObjectStore(db, 'restaurants', 'readwrite')\r\n                  restaurants.forEach(restaurant => store.put(restaurant));\r\n                  return store.openCursor(null, 'prev').then((cursor) => {\r\n                    return cursor.advance(30);\r\n                  }).then(function deleteRest(cursor) {\r\n                    if (!cursor) return;\r\n                    cursor.delete();\r\n                    return cursor.continue()\r\n                      .then(deleteRest);\r\n                  })\r\n                })\r\n              })\r\n          })\r\n        ).then((res) => {\r\n          return callback(null, restaurants);\r\n        });\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`img/10.webp`);\r\n    return (`img/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;","'use strict';\r\nimport DBHelper from './dbhelper.js';\r\nlet restaurants,\r\n    neighborhoods,\r\n    cuisines,\r\n    loc;\r\n\r\nvar mymarker;\r\nvar locsMap;\r\nvar markers = [];\r\n\r\nlet dbPromise = DBHelper.openDatabase;\r\nlet openObjectStore = DBHelper.openObjectStore;\r\n\r\nconst triggerFavoriteRequestQueueSync = function () {\r\n  navigator.serviceWorker.ready.then(function (swRegistration) {\r\n    swRegistration.sync.register('favqueue');\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  setEventListeners();\r\n    initMap();\r\n\r\n});\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nvar updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error+\" fetch error\");\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n            loc=restaurants[0].latlng;\r\n            locsMap.flyTo({\r\n                center: loc\r\n            });\r\n            addMarkersToMap(restaurants);\r\n        }\r\n    })\r\n\r\n}\r\n\r\nvar setEventListeners = () => {\r\n  var neighborHoodSelect = document.getElementById('neighborhoods-select');\r\n  neighborHoodSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n\r\n  });\r\n\r\n  var cuisineSelect = document.getElementById('cuisines-select');\r\n  cuisineSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nvar fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nvar fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nvar fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nvar fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize map box map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n     loc = {\r\n       lat:40.722216\r\n     ,\r\n         lng:\r\n             -73.987501};\r\n\r\n    mapboxgl.accessToken = 'pk.eyJ1IjoibWZhcmciLCJhIjoiY2p1ZDloNmRiMDR3MDN5bXk5ZmUzdTRodiJ9.7Tp8zK2yRKBICT5Ry9q64Q';\r\n    mymap(loc);\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nvar updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nvar mymap = (loc) => {\r\n    locsMap = new mapboxgl.Map({\r\n        container: 'locsMap',\r\n        style: 'mapbox://styles/mapbox/streets-v11',\r\n        center: loc, // starting position\r\n        zoom: 11.12// starting zoom\r\n    });\r\n}\r\nvar resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  markers.forEach(m => m.setMap(null));\r\n  markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nvar fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  let tabIndex = 3;\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant, tabIndex));\r\n    tabIndex++;\r\n  });\r\n\r\n  var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\r\n\r\n  if (\"IntersectionObserver\" in window) {\r\n    let lazyImageObserver = new IntersectionObserver(function (entries, observer) {\r\n      entries.forEach(function (entry) {\r\n        if (entry.isIntersecting) {\r\n          let lazyImage = entry.target;\r\n          lazyImage.src = lazyImage.dataset.src;\r\n          lazyImage.srcset = lazyImage.dataset.srcset;\r\n          lazyImage.classList.remove(\"lazy\");\r\n          lazyImageObserver.unobserve(lazyImage);\r\n        }\r\n      });\r\n    });\r\n\r\n    lazyImages.forEach(function (lazyImage) {\r\n      lazyImageObserver.observe(lazyImage);\r\n    });\r\n  } else {\r\n    // Possibly fall back to a more compatible method here\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nvar createRestaurantHTML = (restaurant, tabIndex) => {\r\n  const restaurantId = restaurant.id;\r\n\r\n  const isRestaurantFavorite = (restaurant.is_favorite == 'true');\r\n\r\n  const li = document.createElement('li');\r\n    li.className = 'restaurant-Card';\r\n    const imgFavContainer = document.createElement('div');\r\n    li.append(imgFavContainer);\r\n    imgFavContainer.className=\"imageFavContainer\";\r\n\r\n    const favoriteButton = document.createElement('button');\r\n    favoriteButton.className=\"favIcon\";\r\n   // favoriteButton.setAttribute ('markFav', '3');\r\n    imgFavContainer.append(favoriteButton);\r\n\r\n    const imgContainer = document.createElement('div');\r\n    imgContainer.className = 'restaurant-img-container';\r\n    imgFavContainer.append(imgContainer);\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = restaurant.name + \" image\";\r\n    imgContainer.append(image);\r\n\r\n  const name = document.createElement('h1');\r\n  name.innerHTML = restaurant.name;\r\n  name.className = 'restaurant-name';\r\n  li.append(name);\r\n\r\n  if (isRestaurantFavorite) {\r\n    favoriteButton.setAttribute('favorised', '');\r\n    favoriteButton.setAttribute('aria-label', `Remove ${restaurant.name} from favorites`);\r\n    favoriteButton.setAttribute ('markFav', true);\r\n  } else {\r\n    favoriteButton.setAttribute('aria-label', `Mark ${restaurant.name} as favorite`);\r\n      favoriteButton.setAttribute ('markFav', false);\r\n  }\r\n\r\n  favoriteButton.setAttribute('restaurantId', restaurantId);\r\n  favoriteButton.setAttribute('restaurantname', restaurant.name);\r\n  favoriteButton.id = `favoriteButton${restaurantId}`;\r\n\r\n\r\n\r\n  favoriteButton.addEventListener('click', toggleFavorite);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.className = 'restaurant-details';\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('address');\r\n  address.innerHTML = restaurant.address;\r\n  address.className = 'restaurant-address';\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.className = 'restaurant-page-link';\r\n  more.setAttribute('aria-label', `for more details about ${restaurant.name}'s restaurant click here`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n\r\n\r\n  return li\r\n}\r\n\r\nconst toggleFavorite = function (event) {\r\n    const restaurantId = parseInt(this.getAttribute('restaurantId'));\r\n    const favoriteButton = document.getElementById(`favoriteButton${restaurantId}`);\r\n    const isFavorised = favoriteButton.hasAttribute('favorised');\r\n    const restaurantName = favoriteButton.getAttribute('restaurantname');\r\n    if (isFavorised) {\r\n        favoriteButton.removeAttribute('favorised');\r\n        favoriteButton.setAttribute('aria-label', `Mark ${restaurantName} as favorite`);\r\n        favoriteButton.setAttribute ('markFav', false);\r\n    } else {\r\n        favoriteButton.setAttribute('favorised', '');\r\n        favoriteButton.setAttribute('aria-label', `Remove ${restaurantName} from favorites`);\r\n        favoriteButton.setAttribute ('markFav', true);\r\n    }\r\n    dbPromise.then(function (db) {\r\n        var restaurantStore = DBHelper.openObjectStore(db, 'restaurants', 'readonly')\r\n        return restaurantStore.get(restaurantId);\r\n    }).then(restaurant => {\r\n        const isFavorite = !(restaurant.is_favorite == 'true');\r\n        restaurant.is_favorite = isFavorite.toString();\r\n        return dbPromise.then(function (db) {\r\n            var restaurantStore = openObjectStore(db, 'restaurants', 'readwrite');\r\n            var favStore = openObjectStore(db, 'favqueue', 'readwrite');\r\n            restaurantStore.put(restaurant);\r\n            restaurant.url = `http://localhost:1337/restaurants/${restaurant.id}/?is_favorite=${isFavorite}`;\r\n            restaurant.method = \"put\";\r\n            favStore.put(restaurant, restaurant.id);\r\n            restaurantStore.complete;\r\n            return favStore.complete\r\n        }).then(() => {\r\n            return triggerFavoriteRequestQueueSync()\r\n        }).catch((err) => console.log(err))\r\n    })\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nvar addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        var el = document.createElement('div');\r\n        el.className = 'marker';\r\n          mymarker =new mapboxgl.Marker(el, { offset: [0, -23] }).setLngLat(restaurant.latlng).addTo(locsMap);\r\n        el.addEventListener('click', function(e) {\r\n            var activeItem = document.getElementsByClassName('active');\r\n            // 1. Fly to the point\r\n            // 2. Close all other popups and display popup for clicked store\r\n            // 3. Highlight listing in sidebar (and remove highlight for all other listings)\r\n            e.stopPropagation();\r\n            window.location.href=DBHelper.urlForRestaurant(restaurant);\r\n        });\r\n    });\r\n}\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nvar resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nvar fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.className = 'restaurant-Cards-Container';\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}