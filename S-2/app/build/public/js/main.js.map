{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/main.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","_idb2","open","upgradeDb","createObjectStore","keyPath","this","openDatabase","then","db","transaction","objectStore","getAll","date","localStorage","setItem","callback","getCachedMessages","data","fetch","credentials","response","json","restaurants","store","forEach","restaurant","put","openCursor","cursor","advance","deleteRest","err","id","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","map","v","indexOf","cuisines","uniqueCuisines","photograph","locsMap","loc","undefined","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","setEventListeners","initMap","getElementById","updateRestaurants","_dbhelperJs2","console","self","fillNeighborhoodsHTML","arguments","select","option","createElement","innerHTML","value","append","fillCuisinesHTML","window","lat","lng","mapboxgl","accessToken","mymap","Map","container","style","center","zoom","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","latlng","flyTo","addMarkersToMap","el","className","Marker","offset","setLngLat","addTo","getElementsByClassName","stopPropagation","location","href","urlForRestaurant","ul","tabIndex","li","imgContainer","image","src","imageUrlForRestaurant","alt","name","address","more","setAttribute","createRestaurantHTML","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","nativeObject","query","count","instance","items","iterateCursor","push","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","idb"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n'use strict';\r\n/**\r\n * Common database helper functions.\r\n */\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openDatabase() {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n    });\r\n  }\r\n\r\n  static getCachedMessages() {\r\n    dbPromise = this.openDatabase();\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      var tx = db.transaction('restaurants');\r\n      var store = tx.objectStore('restaurants');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n  // Util network function.\r\n  static setLastUpdated(date) {\r\n    localStorage.setItem('lastUpdated', date);\r\n  }\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then(function (data) {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants', {\r\n        credentials: 'same-origin'\r\n      }).then(function (response) {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        dbPromise.then(function (db) {\r\n          if (!db) return;\r\n          var tx = db.transaction('restaurants', 'readwrite');\r\n          var store = tx.objectStore('restaurants');\r\n\r\n          restaurants.forEach(restaurant => store.put(restaurant));\r\n\r\n          store.openCursor(null, 'prev').then(function (cursor) {\r\n            return cursor.advance(30);\r\n          }).then(function deleteRest(cursor) {\r\n            if (!cursor) return;\r\n            cursor.delete();\r\n            return cursor.continue().then(deleteRest);\r\n          });\r\n        })\r\n        return callback(null, restaurants);\r\n      })\r\n    }).catch(err => {\r\n      callback(err, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`./img/10.webp`);\r\n    return (`./img/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;","'use strict';\r\nimport DBHelper from './dbhelper.js';\r\nlet restaurants,\r\n    neighborhoods,\r\n    cuisines,\r\n    loc;\r\nvar mymarker;\r\nvar locsMap;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  setEventListeners();\r\n    initMap();\r\n\r\n});\r\n\r\nvar setEventListeners = () => {\r\n  var neighborHoodSelect = document.getElementById('neighborhoods-select');\r\n  neighborHoodSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n\r\n  });\r\n\r\n  var cuisineSelect = document.getElementById('cuisines-select');\r\n  cuisineSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nvar fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nvar fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nvar fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nvar fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize map box map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n     loc = {\r\n       lat:40.722216\r\n     ,\r\n         lng:\r\n             -73.987501};\r\n\r\n    mapboxgl.accessToken = 'pk.eyJ1IjoibWZhcmciLCJhIjoiY2p1ZDloNmRiMDR3MDN5bXk5ZmUzdTRodiJ9.7Tp8zK2yRKBICT5Ry9q64Q';\r\n    mymap(loc);\r\n    updateRestaurants();\r\n}\r\nvar mymap = (loc) => {\r\n    locsMap = new mapboxgl.Map({\r\n        container: 'locsMap',\r\n        style: 'mapbox://styles/mapbox/streets-v11',\r\n        center: loc, // starting position\r\n        zoom: 11.12// starting zoom\r\n    });\r\n}\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nvar updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n      loc=restaurants[0].latlng;\r\n        locsMap.flyTo({\r\n            center: loc\r\n        });\r\n        addMarkersToMap(restaurants);\r\n    }\r\n  })\r\n\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nvar createRestaurantHTML = (restaurant, tabIndex) => {\r\n  const li = document.createElement('li');\r\n    li.className = 'restaurant-Card';\r\n\r\nconst imgContainer = document.createElement('div');\r\n    imgContainer.className = 'restaurant-img-container';\r\n    li.append(imgContainer);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = restaurant.name + \" image\";\r\n    imgContainer.append(image);\r\n\r\n  const name = document.createElement('h1');\r\n  name.innerHTML = restaurant.name;\r\n  name.className = 'restaurant-name';\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.className = 'restaurant-details';\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('address');\r\n  address.innerHTML = restaurant.address;\r\n  address.className = 'restaurant-address';\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.className = 'restaurant-page-link';\r\n  more.setAttribute('aria-label', `for more details about ${restaurant.name}'s restaurant click here`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nvar addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        var el = document.createElement('div');\r\n        el.className = 'marker';\r\n          mymarker =new mapboxgl.Marker(el, { offset: [0, -23] }).setLngLat(restaurant.latlng).addTo(locsMap);\r\n        el.addEventListener('click', function(e) {\r\n            var activeItem = document.getElementsByClassName('active');\r\n            // 1. Fly to the point\r\n            // 2. Close all other popups and display popup for clicked store\r\n            // 3. Highlight listing in sidebar (and remove highlight for all other listings)\r\n            e.stopPropagation();\r\n            window.location.href=DBHelper.urlForRestaurant(restaurant);\r\n        });\r\n    });\r\n}\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nvar resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nvar fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.className = 'restaurant-Cards-Container';\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}