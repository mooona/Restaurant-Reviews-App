{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","_idb2","open","upgradeDb","createObjectStore","keyPath","this","openDatabase","then","db","transaction","objectStore","getAll","date","localStorage","setItem","callback","getCachedMessages","data","fetch","credentials","response","json","restaurants","store","forEach","restaurant","put","openCursor","cursor","advance","deleteRest","err","id","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","map","v","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","self","idb"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,+QCMIK,MANY,2CAQVC,EAAQ,oBAARA,uGAAAA,YAAAA,EAAQ,KAAA,CAAA,0BAEO,WACjB,OAAOC,EAAA,QAAIC,KAAK,cAAe,EAAG,SAAUC,GAC1CA,EAAUC,kBAAkB,cAAe,CAAEC,QAAS,0CAIlC,WAEtB,OADAN,EAAYO,KAAKC,gBACAC,KAAK,SAAUC,GAE9B,GAAKA,EAKL,OAHSA,EAAGC,YAAY,eACTC,YAAY,eAEdC,yCAKI,SAACC,GACpBC,aAAaC,QAAQ,cAAeF,mCAef,SAACG,GACtBV,KAAKW,oBAAoBT,KAAK,SAAUU,GACtC,GAAkB,EAAdA,EAAKtB,OACP,OAAOoB,EAAS,KAAME,GAGxBC,MAAM,oCAAqC,CACzCC,YAAa,gBACZZ,KAAK,SAAUa,GAChB,OAAOA,EAASC,SACfd,KAAK,SAAAe,GAgBN,OAfAxB,EAAUS,KAAK,SAAUC,GACvB,GAAKA,EAAL,CACA,IACIe,EADKf,EAAGC,YAAY,cAAe,aACxBC,YAAY,eAE3BY,EAAYE,QAAQ,SAAAC,UAAcF,EAAMG,IAAID,KAE5CF,EAAMI,WAAW,KAAM,QAAQpB,KAAK,SAAUqB,GAC5C,OAAOA,EAAOC,QAAQ,MACrBtB,KAAK,SAASuB,EAAWF,GAC1B,GAAKA,EAEL,OADAA,EAAM,SACCA,EAAM,WAAYrB,KAAKuB,QAG3Bf,EAAS,KAAMO,OAExB,MAAO,SAAAS,GACPhB,EAASgB,EAAK,2CAOQ,SAACC,EAAIjB,GAE7BhB,EAASkC,iBAAiB,SAACC,EAAOZ,GAChC,GAAIY,EACFnB,EAASmB,EAAO,UACX,CACL,IAAMT,EAAaH,EAAYa,KAAK,SAAArD,UAAKA,EAAEkD,IAAMA,IAC7CP,EACFV,EAAS,KAAMU,GAEfV,EAAS,4BAA6B,iDASf,SAACqB,EAASrB,GAEvChB,EAASkC,iBAAiB,SAACC,EAAOZ,GAChC,GAAIY,EACFnB,EAASmB,EAAO,UACX,CAEL,IAAMG,EAAUf,EAAYgB,OAAO,SAAAxD,UAAKA,EAAEyD,cAAgBH,IAC1DrB,EAAS,KAAMsB,mDAQe,SAACG,EAAczB,GAEjDhB,EAASkC,iBAAiB,SAACC,EAAOZ,GAChC,GAAIY,EACFnB,EAASmB,EAAO,UACX,CAEL,IAAMG,EAAUf,EAAYgB,OAAO,SAAAxD,UAAKA,EAAE0D,cAAgBA,IAC1DzB,EAAS,KAAMsB,6DAQyB,SAACD,EAASI,EAAczB,GAEpEhB,EAASkC,iBAAiB,SAACC,EAAOZ,GAChC,GAAIY,EACFnB,EAASmB,EAAO,UACX,CACL,IAAIG,EAAUf,EACC,OAAXc,IACFC,EAAUA,EAAQC,OAAO,SAAAxD,UAAKA,EAAEyD,cAAgBH,KAE9B,OAAhBI,IACFH,EAAUA,EAAQC,OAAO,SAAAxD,UAAKA,EAAE0D,cAAgBA,KAElDzB,EAAS,KAAMsB,wCAQI,SAACtB,GAExBhB,EAASkC,iBAAiB,SAACC,EAAOZ,OAKxBmB,EAEAC,EANJR,EACFnB,EAASmB,EAAO,OAGVO,EAAgBnB,EAAYqB,IAAI,SAACC,EAAGxD,UAAMkC,EAAYlC,GAAGoD,eAEzDE,EAAsBD,EAAcH,OAAO,SAACM,EAAGxD,UAAMqD,EAAcI,QAAQD,IAAMxD,IACvF2B,EAAS,KAAM2B,mCAQD,SAAC3B,GAEnBhB,EAASkC,iBAAiB,SAACC,EAAOZ,OAKxBwB,EAEAC,EANJb,EACFnB,EAASmB,EAAO,OAGVY,EAAWxB,EAAYqB,IAAI,SAACC,EAAGxD,UAAMkC,EAAYlC,GAAGmD,eAEpDQ,EAAiBD,EAASR,OAAO,SAACM,EAAGxD,UAAM0D,EAASD,QAAQD,IAAMxD,IACxE2B,EAAS,KAAMgC,sCAQE,SAACtB,GACtB,MAAA,wBAAgCA,EAAWO,wCAMjB,SAACP,GAC3B,OAAqB,IAAjBA,EAAWO,GAAU,gCACzB,yBAAiCP,EAAWuB,WAAU,8CAM3B,SAACvB,EAAYkB,GASxC,OARe,IAAIM,OAAOC,KAAKC,OAAO,CACpCC,SAAU3B,EAAW4B,OACrBC,MAAO7B,EAAW8B,KAClBC,IAAKzD,EAAS0D,iBAAiBhC,GAC/BkB,IAAKA,EACLe,UAAWT,OAAOC,KAAKS,UAAUC,iCA7Kd,WAErB,MAAA,kDAhCE7D,EAAQ,GAmNdF,EAAOJ,QAAUM,+BC3NjB,cAEA,WAKA,SAAA8D,EAAAC,GACA,OAAA,IAAAC,QAAA,SAAAC,EAAAC,GACAH,EAAAI,UAAA,WACAF,EAAAF,EAAAK,SAGAL,EAAAM,QAAA,WACAH,EAAAH,EAAA5B,UAKA,SAAAmC,EAAAC,EAAAC,EAAAC,GACA,IAAAV,EACAW,EAAA,IAAAV,QAAA,SAAAC,EAAAC,GAEAJ,EADAC,EAAAQ,EAAAC,GAAAG,MAAAJ,EAAAE,IACAjE,KAAAyD,EAAAC,KAIA,OADAQ,EAAAX,QAAAA,EACAW,EAWA,SAAAE,EAAAC,EAAAC,EAAAC,GACAA,EAAAtD,QAAA,SAAAuD,GACAC,OAAAC,eAAAL,EAAAM,UAAAH,EAAA,CACAI,IAAA,WACA,OAAA9E,KAAAwE,GAAAE,IAEAK,IAAA,SAAAC,GACAhF,KAAAwE,GAAAE,GAAAM,OAMA,SAAAC,EAAAV,EAAAC,EAAAU,EAAAT,GACAA,EAAAtD,QAAA,SAAAuD,GACAA,KAAAQ,EAAAL,YACAN,EAAAM,UAAAH,GAAA,WACA,OAAAV,EAAAhE,KAAAwE,GAAAE,EAAAS,eAKA,SAAAC,EAAAb,EAAAC,EAAAU,EAAAT,GACAA,EAAAtD,QAAA,SAAAuD,GACAA,KAAAQ,EAAAL,YACAN,EAAAM,UAAAH,GAAA,WACA,OAAA1E,KAAAwE,GAAAE,GAAAL,MAAArE,KAAAwE,GAAAW,eAKA,SAAAE,EAAAd,EAAAC,EAAAU,EAAAT,GACAA,EAAAtD,QAAA,SAAAuD,GACAA,KAAAQ,EAAAL,YACAN,EAAAM,UAAAH,GAAA,WACA,OA3CAT,EA2CAjE,KAAAwE,IA1CAJ,EAAAJ,EAAAC,EA0CAS,EAAAS,YAzCAjF,KAAA,SAAAoF,GACA,GAAAA,EACA,OAAA,IAAAC,EAAAD,EAAAlB,EAAAX,WAJA,IAAAQ,EACAG,MA+CA,SAAAoB,EAAAC,GACAzF,KAAA0F,OAAAD,EAuBA,SAAAF,EAAAhE,EAAAkC,GACAzD,KAAA2F,QAAApE,EACAvB,KAAA4F,SAAAnC,EA+BA,SAAAoC,EAAA3E,GACAlB,KAAA8F,OAAA5E,EAuCA,SAAA6E,EAAAC,GACAhG,KAAAiG,IAAAD,EACAhG,KAAAkG,SAAA,IAAAxC,QAAA,SAAAC,EAAAC,GACAoC,EAAAG,WAAA,WACAxC,KAEAqC,EAAAjC,QAAA,WACAH,EAAAoC,EAAAnE,QAEAmE,EAAAI,QAAA,WACAxC,EAAAoC,EAAAnE,UAkBA,SAAAwE,EAAAlG,EAAAmG,EAAAlG,GACAJ,KAAAuG,IAAApG,EACAH,KAAAsG,WAAAA,EACAtG,KAAAI,YAAA,IAAA2F,EAAA3F,GAkBA,SAAAoG,EAAArG,GACAH,KAAAuG,IAAApG,EA/IAmE,EAAAkB,EAAA,SAAA,CACA,OACA,UACA,aACA,WAGAP,EAAAO,EAAA,SAAAiB,SAAA,CACA,MACA,SACA,SACA,aACA,UAGApB,EAAAG,EAAA,SAAAiB,SAAA,CACA,aACA,kBAQAnC,EAAAiB,EAAA,UAAA,CACA,YACA,MACA,aACA,UAGAN,EAAAM,EAAA,UAAAmB,UAAA,CACA,SACA,WAIA,CAAA,UAAA,WAAA,sBAAAvF,QAAA,SAAAwF,GACAA,KAAAD,UAAA7B,YACAU,EAAAV,UAAA8B,GAAA,WACA,IAAApF,EAAAvB,KACAmE,EAAAgB,UACA,OAAAzB,QAAAC,UAAAzD,KAAA,WAEA,OADAqB,EAAAoE,QAAAgB,GAAAtC,MAAA9C,EAAAoE,QAAAxB,GACAX,EAAAjC,EAAAqE,UAAA1F,KAAA,SAAAoF,GACA,GAAAA,EACA,OAAA,IAAAC,EAAAD,EAAA/D,EAAAqE,kBAUAC,EAAAhB,UAAA+B,YAAA,WACA,OAAA,IAAApB,EAAAxF,KAAA8F,OAAAc,YAAAvC,MAAArE,KAAA8F,OAAAX,aAGAU,EAAAhB,UAAAY,MAAA,WACA,OAAA,IAAAD,EAAAxF,KAAA8F,OAAAL,MAAApB,MAAArE,KAAA8F,OAAAX,aAGAb,EAAAuB,EAAA,SAAA,CACA,OACA,UACA,aACA,kBAGAZ,EAAAY,EAAA,SAAAgB,eAAA,CACA,MACA,MACA,SACA,QACA,MACA,SACA,SACA,aACA,UAGAxB,EAAAQ,EAAA,SAAAgB,eAAA,CACA,aACA,kBAGAzB,EAAAS,EAAA,SAAAgB,eAAA,CACA,gBAkBAd,EAAAlB,UAAAxE,YAAA,WACA,OAAA,IAAAwF,EAAA7F,KAAAiG,IAAA5F,YAAAgE,MAAArE,KAAAiG,IAAAd,aAGAb,EAAAyB,EAAA,MAAA,CACA,mBACA,SAGAX,EAAAW,EAAA,MAAAe,eAAA,CACA,UASAT,EAAAxB,UAAA/E,kBAAA,WACA,OAAA,IAAA+F,EAAA7F,KAAAuG,IAAAzG,kBAAAuE,MAAArE,KAAAuG,IAAApB,aAGAb,EAAA+B,EAAA,MAAA,CACA,OACA,UACA,qBAGAjB,EAAAiB,EAAA,MAAAU,YAAA,CACA,oBACA,UAOAP,EAAA3B,UAAAzE,YAAA,WACA,OAAA,IAAA2F,EAAA/F,KAAAuG,IAAAnG,YAAAiE,MAAArE,KAAAuG,IAAApB,aAGAb,EAAAkC,EAAA,MAAA,CACA,OACA,UACA,qBAGApB,EAAAoB,EAAA,MAAAO,YAAA,CACA,UAKA,CAAA,aAAA,iBAAA5F,QAAA,SAAA6F,GACA,CAAAnB,EAAAL,GAAArE,QAAA,SAAA+D,GACAA,EAAAL,UAAAmC,EAAAC,QAAA,OAAA,YAAA,WACA,IApPAC,EAoPA/C,GApPA+C,EAoPA/B,UAnPAgC,MAAAtC,UAAAuC,MAAA/H,KAAA6H,IAoPAxG,EAAAyD,EAAAA,EAAA7E,OAAA,GACA+H,EAAArH,KAAA8F,QAAA9F,KAAA0F,OACAjC,EAAA4D,EAAAL,GAAA3C,MAAAgD,EAAAlD,EAAAiD,MAAA,GAAA,IACA3D,EAAAI,UAAA,WACAnD,EAAA+C,EAAAK,cAOA,CAAA0B,EAAAK,GAAA1E,QAAA,SAAA+D,GACAA,EAAAL,UAAAvE,SACA4E,EAAAL,UAAAvE,OAAA,SAAAgH,EAAAC,GACA,IAAAC,EAAAxH,KACAyH,EAAA,GAEA,OAAA,IAAA/D,QAAA,SAAAC,GACA6D,EAAAE,cAAAJ,EAAA,SAAA/F,GACAA,GAIAkG,EAAAE,KAAApG,EAAA+D,YAEAsC,IAAAL,GAAAE,EAAAnI,QAAAiI,EAIAhG,EAAAsG,WAHAlE,EAAA8D,IANA9D,EAAA8D,WAeA,IAAAK,EAAA,CACAlI,KAAA,SAAAsD,EAAA6E,EAAAC,GACA,IAAA5D,EAAAJ,EAAAiE,UAAA,OAAA,CAAA/E,EAAA6E,IACAtE,EAAAW,EAAAX,QAQA,OANAA,EAAAyE,gBAAA,SAAAC,GACAH,GACAA,EAAA,IAAA3B,EAAA5C,EAAAK,OAAAqE,EAAA7B,WAAA7C,EAAArD,eAIAgE,EAAAlE,KAAA,SAAAC,GACA,OAAA,IAAAqG,EAAArG,MAGAiI,OAAA,SAAAlF,GACA,OAAAc,EAAAiE,UAAA,iBAAA,CAAA/E,WAIA,IAAA1D,EACAA,EAAAJ,QAAA0I,EAGAO,KAAAC,IAAAR,EAjTA","file":"dbhelper.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n'use strict';\r\n/**\r\n * Common database helper functions.\r\n */\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openDatabase() {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n    });\r\n  }\r\n\r\n  static getCachedMessages() {\r\n    dbPromise = this.openDatabase();\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      var tx = db.transaction('restaurants');\r\n      var store = tx.objectStore('restaurants');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n  // Util network function.\r\n  static setLastUpdated(date) {\r\n    localStorage.setItem('lastUpdated', date);\r\n  }\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then(function (data) {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants', {\r\n        credentials: 'same-origin'\r\n      }).then(function (response) {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        dbPromise.then(function (db) {\r\n          if (!db) return;\r\n          var tx = db.transaction('restaurants', 'readwrite');\r\n          var store = tx.objectStore('restaurants');\r\n\r\n          restaurants.forEach(restaurant => store.put(restaurant));\r\n\r\n          store.openCursor(null, 'prev').then(function (cursor) {\r\n            return cursor.advance(30);\r\n          }).then(function deleteRest(cursor) {\r\n            if (!cursor) return;\r\n            cursor.delete();\r\n            return cursor.continue().then(deleteRest);\r\n          });\r\n        })\r\n        return callback(null, restaurants);\r\n      })\r\n    }).catch(err => {\r\n      callback(err, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`./build/public/images/10.webp`);\r\n    return (`./build/public/images/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    }\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}